// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package balance is a generated GoMock package.
package balance

import (
	context "context"
	reflect "reflect"

	models "github.com/egor-zakharov/go-musthave-diploma-tpl/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddWithdraw mocks base method.
func (m *MockStorage) AddWithdraw(ctx context.Context, withdraw models.Withdrawal, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdraw", ctx, withdraw, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdraw indicates an expected call of AddWithdraw.
func (mr *MockStorageMockRecorder) AddWithdraw(ctx, withdraw, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdraw", reflect.TypeOf((*MockStorage)(nil).AddWithdraw), ctx, withdraw, userID)
}

// GetAllWithdrawByUser mocks base method.
func (m *MockStorage) GetAllWithdrawByUser(ctx context.Context, userID string) (*[]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithdrawByUser", ctx, userID)
	ret0, _ := ret[0].(*[]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithdrawByUser indicates an expected call of GetAllWithdrawByUser.
func (mr *MockStorageMockRecorder) GetAllWithdrawByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithdrawByUser", reflect.TypeOf((*MockStorage)(nil).GetAllWithdrawByUser), ctx, userID)
}

// GetBalance mocks base method.
func (m *MockStorage) GetBalance(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorageMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorage)(nil).GetBalance), ctx, userID)
}

// GetSumWithdrawal mocks base method.
func (m *MockStorage) GetSumWithdrawal(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumWithdrawal", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumWithdrawal indicates an expected call of GetSumWithdrawal.
func (mr *MockStorageMockRecorder) GetSumWithdrawal(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumWithdrawal", reflect.TypeOf((*MockStorage)(nil).GetSumWithdrawal), ctx, userID)
}

// SetBalance mocks base method.
func (m *MockStorage) SetBalance(ctx context.Context, sum float64, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalance", ctx, sum, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockStorageMockRecorder) SetBalance(ctx, sum, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockStorage)(nil).SetBalance), ctx, sum, userID)
}
