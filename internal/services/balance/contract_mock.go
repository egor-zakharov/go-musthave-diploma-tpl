// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package balance is a generated GoMock package.
package balance

import (
	context "context"
	reflect "reflect"

	models "github.com/egor-zakharov/go-musthave-diploma-tpl/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddWithdraw mocks base method.
func (m *MockService) AddWithdraw(ctx context.Context, withdraw models.Withdrawal, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdraw", ctx, withdraw, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdraw indicates an expected call of AddWithdraw.
func (mr *MockServiceMockRecorder) AddWithdraw(ctx, withdraw, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdraw", reflect.TypeOf((*MockService)(nil).AddWithdraw), ctx, withdraw, userID)
}

// CanWithdraw mocks base method.
func (m *MockService) CanWithdraw(ctx context.Context, sum float64, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanWithdraw", ctx, sum, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanWithdraw indicates an expected call of CanWithdraw.
func (mr *MockServiceMockRecorder) CanWithdraw(ctx, sum, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanWithdraw", reflect.TypeOf((*MockService)(nil).CanWithdraw), ctx, sum, userID)
}

// GetAllWithdrawByUser mocks base method.
func (m *MockService) GetAllWithdrawByUser(ctx context.Context, userID string) (*[]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithdrawByUser", ctx, userID)
	ret0, _ := ret[0].(*[]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithdrawByUser indicates an expected call of GetAllWithdrawByUser.
func (mr *MockServiceMockRecorder) GetAllWithdrawByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithdrawByUser", reflect.TypeOf((*MockService)(nil).GetAllWithdrawByUser), ctx, userID)
}

// GetBalance mocks base method.
func (m *MockService) GetBalance(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockServiceMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockService)(nil).GetBalance), ctx, userID)
}

// GetSumWithdraw mocks base method.
func (m *MockService) GetSumWithdraw(ctx context.Context, userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumWithdraw", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumWithdraw indicates an expected call of GetSumWithdraw.
func (mr *MockServiceMockRecorder) GetSumWithdraw(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumWithdraw", reflect.TypeOf((*MockService)(nil).GetSumWithdraw), ctx, userID)
}
